/**
 * Init - Inicializaci√≥n y manejo de errores globales de la aplicaci√≥n
 * Punto de entrada principal para arrancar el Explorador Musical
 */

// ===== INICIALIZACI√ìN DE LA APLICACI√ìN =====
document.addEventListener('DOMContentLoaded', () => {
    console.log('üéµ Iniciando Explorador Musical...');
    
    // Verificar compatibilidad del navegador
    if (!window.fetch) {
        alert('Tu navegador no es compatible. Por favor actualiza a una versi√≥n m√°s reciente.');
        return;
    }
    
    if (!StorageManager.isAvailable()) {
        console.warn('sessionStorage no disponible. Los favoritos y configuraciones no se guardar√°n.');
    }
    
    // Inicializar aplicaci√≥n
    try {
        window.musicApp = new MusicApp();
        
        // Funciones de debugging disponibles en consola
        window.debugMusicApp = {
            clearAllData: () => window.musicApp.clearAllData(),
            showFavorites: () => console.table(window.musicApp.favorites.map(f => ({id: f.trackId, name: f.trackName, artist: f.artistName}))),
            clearFavorites: () => {
                window.musicApp.favorites = [];
                window.musicApp.saveFavorites();
                window.musicApp.updateCounters();
                console.log('‚úÖ Favoritos limpiados');
            }
        };
        
        console.log('‚úÖ Aplicaci√≥n iniciada correctamente');
        console.log('üêõ Usa window.debugMusicApp para debugging');
    } catch (error) {
        console.error('‚ùå Error al inicializar la aplicaci√≥n:', error);
        alert('Error al cargar la aplicaci√≥n. Por favor recarga la p√°gina.');
    }
});

// ===== MANEJO DE ERRORES GLOBALES =====
window.addEventListener('error', (event) => {
    console.error('Error global:', event.error);
    
    // Solo mostrar notificaci√≥n para errores cr√≠ticos, no para errores menores
    if (window.musicApp && event.error && event.error.message && 
        !event.error.message.includes('Non-Error promise rejection captured') &&
        !event.filename?.includes('input') &&
        event.error.name !== 'TypeError') {
        NotificationManager.show('Error', 'Se produjo un error inesperado', 'error');
    }
});

window.addEventListener('unhandledrejection', (event) => {
    console.error('Promesa rechazada:', event.reason);
    
    // Solo mostrar notificaci√≥n para promesas cr√≠ticas rechazadas
    if (window.musicApp && event.reason && 
        typeof event.reason === 'object' && 
        event.reason.message &&
        !event.reason.message.includes('fetch')) {
        NotificationManager.show('Error', 'Error en operaci√≥n as√≠ncrona', 'error');
    }
});